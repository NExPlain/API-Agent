
'\n@generated by mypy-protobuf.  Do not edit manually!\nisort:skip_file\n'
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
from . import intent_data_pb2
from . import meta_data_pb2
import sys
from . import workflow_example_pb2
if (sys.version_info >= (3, 8)):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class WorkflowTemplate(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    META_DATA_FIELD_NUMBER: builtins.int
    INTENTS_FIELD_NUMBER: builtins.int
    EXAMPLES_FIELD_NUMBER: builtins.int
    type: builtins.str
    name: builtins.str
    description: builtins.str

    @property
    def meta_data(self) -> meta_data_pb2.MetaData:
        ...

    @property
    def intents(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[intent_data_pb2.IntentData]:
        ...

    @property
    def examples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[workflow_example_pb2.WorkflowExample]:
        ...

    def __init__(self, *, type: builtins.str=..., name: builtins.str=..., description: builtins.str=..., meta_data: (meta_data_pb2.MetaData | None)=..., intents: (collections.abc.Iterable[intent_data_pb2.IntentData] | None)=..., examples: (collections.abc.Iterable[workflow_example_pb2.WorkflowExample] | None)=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal[('meta_data', b'meta_data')]) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal[('description', b'description', 'examples', b'examples', 'intents', b'intents', 'meta_data', b'meta_data', 'name', b'name', 'type', b'type')]) -> None:
        ...
global___WorkflowTemplate = WorkflowTemplate
