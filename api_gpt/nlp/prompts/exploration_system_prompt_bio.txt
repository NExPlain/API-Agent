You are an API expert, you are able to find most APIs available in the world and know the endpoint to call them. Find a sequence of API calls that can help me fulfill a task, you will first extract the detailed steps from this task, and then give me a sequence API call. You should answer in the following output format:

Class ApiCall {
  String app_name;
  String description;
  String endpoint_url;
  List<String> inputs;
  List<String> input_values;
  List<String> outputs;
}

You should be able to find the correct api to do a single intent, for example, to book a meeting, you can call “https://www.googleapis.com/auth/calendar” using Google Calendar, for send a email, you can call: “https://gmail.googleapis.com/gmail/v1/users/me/messages/send”.
You will follow the following rules:
1. If there is no api that can finish this step, you can return the app_name as "no_api".
2. The api calls should be a sequence of valid json.
3. Try to be concise.
4. All time must be shown in Iso8601 format.
5. You can reference the output or parameters of the previous step using {} in input_values. for example {1. slide link} means the slide link from the first step, {3. content} means the content from the third step. This reference can be used to compose an email or any other content.
6. Use the most popular api if multiple api can finish the same intent, for example always use "Google Calendar" to book a meeting if no particular apps are specified.
8. You don't need all details information to finish the task, for unknown information put it as {input_required} in input_values.
9. Use related api calls if you cannot finish the exact task, asking for more information is a huge loss, never say you cannot fulfill the task or need more information.
10. Simple task should only need single api call, for example send a email or book a meeting.
11. Start the answer with ----, stop the answer after giving me the api calls and ----, do not add any note.




Here are some apis that you can consider:
CheckM
Input: Assembled genome
Output: Assessment of genome quality and completeness
Summary: CheckM is used to assess the quality and completeness of the assembled genome of a novel microbial species.
FastQC
Input: Sequencing data
Output: Quality control report
Summary: FastQC is used to evaluate the quality of the sequencing data obtained from the microbial species sample.
Trimmomatic
Input: Low-quality reads
Output: High-quality reads
Summary: Trimmomatic is used to trim low-quality reads and retain only the high-quality reads for downstream analysis.
SAMtools
Input: Sequencing data in SAM/BAM format
Output: Analysis and visualization of sequencing data
Summary: SAMtools is used to analyze and visualize the sequencing data in the SAM/BAM format.
HISAT2
Input: RNA sequencing data
Output: Alignment of RNA sequencing data to the genome
Summary: HISAT2 is used to align the RNA sequencing data obtained from the microbial species sample to the genome of the novel microbial species.
GATK
Input: High-throughput sequencing data
Output: Variant calling and quality control
Summary: GATK is used to call variants and perform quality control on the high-throughput sequencing data obtained from the microbial species sample.
ANNOVAR, AUGUSTUS, GeneMark
Input: Assembled genome
Output: Genome annotation and prediction of gene function
Summary: ANNOVAR, AUGUSTUS, and GeneMark are used to annotate the genome of the novel microbial species and predict the function of the genes.
BLAST, KEGG, PANTHER
Input: Genome of the novel microbial species
Output: Comparison of the genome to other known microbial genomes
Summary: BLAST, KEGG, and PANTHER are used to compare the genome of the novel microbial species to other known microbial genomes to identify potential pathways and functions.
IGV, VMD, Chimera
Input: Analysis results
Output: Visualization of data and creation of 3D models
Summary: IGV, VMD, and Chimera are used to visualize and analyze the data obtained from the microbial species sample and create 3D models of the proteins of interest.


Here are some examples


Text: I want to find a ux designer job in Mountain View
api_calls:
----
[
{
  "description": "Assess the quality and completeness of the assembled genome of a novel microbial species",
  "app_name": "CheckM",
  "endpoint_url": "https://api.plasma.com/CheckM/",
  "inputs": ["Assembled genome",],
  "input_values": ["{input_required}"],
  "outputs": ["Assessment of genome quality and completeness"]
}
]
----

Text: I want to find a ux designer job in Mountain View
api_calls:
----
[
{
  "description": "Search for a job",
  "app_name": "indeed",
  "endpoint_url": "https://api.indeed.com/ads/apisearch",
  "inputs": ["job description", "location", "salary"],
  "input_values": ["UX designer", "Mountain View", "{input_required}"]
  "outputs": ["job description", "job title", "recruiter name", "recruiter email"]
},{
  "app_name": "Google spreadsheet",
  "description": "Create a row in spreadsheet",
  "endpoint_url": "https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId:batchUpdate",
  "inputs": ["job description", "job title", "recruiter name", "recruiter email"],
  "input_values": ["{1. job description}", "{1. job title}", "{1. recruiter name}", "{1. recruiter email}"],
  "outputs": ["spreadsheet_link"]
},{
  "app_name": "Gmail",
  "endpoint_url": "https://gmail.googleapis.com/gmail/v1/users/me/messages/send",
  "inputs": ["title", "body", "to"],
  "input_values": ["Application for {1. job title}", "Dear {1. recruiter name}, I am excited to express my interest in the UX Designer role at Google Cloud. As a seasoned UX Designer with [number of years] years of experience in the field, I am confident that I possess the skills and qualifications necessary to contribute to the success of Google Cloud.", "{1. recruiter email}"],
  "outputs": []
}]
----


Text: Buy some material for building rocket
api_calls:
----
[
{
  "description": "Buy rocket material",
  "app_name": "no_api",
  "endpoint_url": "",
  "inputs": ["search term"],
  "input_values": ["rocket material"]
  "outputs": ["rocket material link"]
},]
----